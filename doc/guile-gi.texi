\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename guile-gi.info
@settitle Guile GI
@c %**end of header

@copying
Copyright @copyright{} 2018 Michael L. Gran
@end copying

@titlepage
@title Guile GI
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Preface, (dir), (dir)
@top Guile GI

This manual is for Guile GI.
@end ifnottex

@menu
* Preface::
* Getting Started::
* Tutorials::
* Reference Guide::
* Further Resources and Contact Info::
* _index::

@detailmenu
 --- The Detailed Node Listing ---

Getting Started

* Installation::
* Sample Applications::

Sample Applications

* Example 1::

Tutorials

* Threads and Concurrency::
* Debugging and Profiling::
* Application Deployment::
* Testing and Continuous Integration::

Reference Guide

* typelib introspection procedures::
* GObject types::

@end detailmenu
@end menu

@node Preface, Getting Started, Top, Top
@unnumbered Preface
Guile GI is a Guile package that provides for GObject-based libraries
such as GTK+, GLib, WebKitGTK+ and many more.

It supports Linux and possibly Windows.  Guile GI, including this
documentation, is licensed under the LGPLv2.1+

If you want to write a Guile application for GNOME or a Guile GUI
application using GTk+, then Guile GI (when it is finished) will be
the way to go.  For more information on specific libraries, check out
the ``Guile Gtk+ 3 Tutorial'' and ``Guile GIO Tutorial''
chapters. (FIXME: write these.)

@node Getting Started, Tutorials, Preface, Top
@chapter Getting Started

To get things started, we will try to run a very simple GTK+ based GUI
application using the bindings provided by Guile GI.

First, create a @code{(Gtk)} Guile module.

@example
 guile -L . -c '(use-modules (gi)) (display (export-typelib "Gtk" "3.0"))' > Gtk.scm
@end example

Then, create a
small Guile script called @file{hello.scm} with the following content
and save it somewhere (FIXME, this doesn't work):

@lisp
(use-modules (gi)
             (Gtk))
(define window (Window #:title "Hello World"))
(show window)
(connect window main-quit)
(main)
@end lisp

Before we can run the example application, we need to install Guile
GI, GTK+, and their dependencioes.

When it is run, it will create an empty window with a title.  Are you
impressed?

@menu
* Installation::
* Sample Applications::
@end menu

@node Installation, Sample Applications, Getting Started, Getting Started
@section Installation

@node Sample Applications,  , Installation, Getting Started
@section Sample Applications

@menu
* Example 1::
@end menu

@node Example 1,  , Sample Applications, Sample Applications
@subsection Example 1

@node Tutorials, Reference Guide, Getting Started, Top
@chapter Tutorials

@menu
* Threads and Concurrency::
* Debugging and Profiling::
* Application Deployment::
* Testing and Continuous Integration::
@end menu

@node Threads and Concurrency, Debugging and Profiling, Tutorials, Tutorials
@section Threads and Concurrency

@node Debugging and Profiling, Application Deployment, Threads and Concurrency, Tutorials
@section Debugging and Profiling

@node Application Deployment, Testing and Continuous Integration, Debugging and Profiling, Tutorials
@section Application Deployment

@node Testing and Continuous Integration,  , Application Deployment, Tutorials
@section Testing and Continuous Integration

@node Reference Guide, Further Resources and Contact Info, Tutorials, Top
@chapter Reference Guide

The Guile GI project provides a Guile module @file{(gi)}.  The
@file{(gi)} module is an interface for dynamically creating Guile
modules for GObject-based libraries by examining the information in
their @file{.typelib} files.

@c -----------------------------------------------------------------
@menu
* typelib introspection procedures::
* GObject types::
@end menu

@c -----------------------------------------------------------------
@node typelib introspection procedures, GObject types, Reference Guide, Reference Guide
@section Typelib introspection procedures

A GObject typelib file contains information on the public classes,
functions, and variables in a GObject-based library, and most
GObject-complient libraries, such as GLib and GTK, provide one.
Usually these files are on the filesystem in a single directory
location.  On Fedora, for example, these files may be stored in
@file{/var/lib64/girepository-1.0}.

@deffn Procedure get-typelib-search-path
This returns, as a list of strings, the current search path used to find
typelib files.

If it returns an empty list, this indicates that it is only searching
the default typelib directory.
@end deffn

@deffn Procedure prepend-typelib-search-path directory
Given @var{directory}, a string representation of a filesystem
directory, this prepends that directory to the typelib search path.
@end deffn

@deffn Procedure export-typelib namespace version
Given @var{namespace}, a string that names a typelib library, such as
``Gtk'' or ``GLib'', and @var{version}, a string that names a version
of a typelib library, like ``2.0'' or ``3.0'', this procedure parses a
typelib file and generates the Scheme source code for a binding to the
library.  The source code is returned as a string, which you should
save to a file.

The procedure may throw an error if a typelib file corresponding to
@var{namespace} and @var{version} cannot be found.
@end deffn

@deffn Procedure import-typelib namespace version
Given @var{namespace}, a string that names a typelib library, such as
``Gtk'' or ``GLib'', and @var{version}, a string that names a version
of a typelib library, like ``2.0'' or ``3.0'', this procedure parses a
typelib file and generates procedures, constants, and types which are
loaded into the current environment.

The procedure may throw an error if a typelib file corresponding to
@var{namespace} and @var{version} cannot be found.

This procedure implicitly calls @code{load-typelib}.

The return value is unspecified.
@end deffn

@deffn Procedure load-typelib namespace version
Given @var{namespace}, a string that names a typelib library, such as
``Gtk'' or ``GLib'', and @var{version} a string that names a version
of a typelib library , like ``2.0'' or ``3.0'', this procedure reads a
typelib file, and indexes the information in the typelib file into
several hash tables.  The hash tables are created in the current
environment, and have names such as @code{%gi-constants} and
@code{%gi-functions}.

The procedure may throw an error if a typelib file corresponding to
@var{namespace} and @var{version} cannot be found.

The return value is unspecified.
@end deffn

@defvar %gi-constants
@defvarx %gi-enums
@defvarx %gi-flags
@defvarx %gi-functions
@defvarx %gi-methods
@defvarx %gi-callbacks
@defvarx %gi-structs
@defvarx %gi-unions
@defvarx %gi-objects
@defvarx %gi-interfaces
@defvarx %gi-signals
These are all hash tables generated by @code{load-typelib}.  They
contain information parsed from a typelib file and indexed for easier
access by procedures such as @code{gi-constant-value} and
@code{gi-function-invoke}.
@end defvar

@deffn gi-constant-value name
@deffnx gi-flag-value category name
@deffnx gi-enum-value category name
@deffnx gi-struct-ref ptr type-name field-name
@deffnx gi-struct-set ptr type-name field-name value
@deffnx gi-function-invoke name [args...]
@deffnx gi-method-prepare name [args...]
@deffnx gi-method-send object list-of-args
@deffnx gi-lookup-type name
@deffnx gi-lookup-callback-info name
These procedures are used to generate the bindings.  They lookup
introspection information stored in hash tables generated by the
@code{load-typelib} procedure and convert between C and Guile types.

They are used in the procedures generated by @code{export-typelib} and
@code{import-typelib}.
@end deffn

@c -----------------------------------------------------------------
@node GObject types,  , typelib introspection procedures, Reference Guide
@section GObject Types

If you inspect the bindings generated by @code{load-repository}, you
will notice many references to the helper functions
@code{gi-function-invoke}, @code{gi-method-prepare}, and
@code{gi-method-send}.  These procedures convert Guile parameters and
return values to GObject-friendly C parameters and return values.

The following table describes what Guile types to use as parameters
when calling GObject

@table @samp
@item gint, guint, gint32, guint32, etc
If the C argument required is an integer, pass it a Guile exact integer
with an appropriate range.
Note that 8-bit integer may represent 8-bit characters in C, but,
those arguments should still be passed Guile exact integers.
@item gfloat, gdouble
C float and double arguments should be passed Guile numbers.
@item gutf8*
When a C arguments requires a utf8*, pass a Guile string, which
will get converted.
@item GObject Flags and Enums
If a flag or enum is required, pass a Guile unsigned number.
@end table

@node Further Resources and Contact Info, _index, Reference Guide, Top
@chapter Further Resources and Contact Info

@node _index,  , Further Resources and Contact Info, Top
@unnumbered Index

@printindex cp

@bye
